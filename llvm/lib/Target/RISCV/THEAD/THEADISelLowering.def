if (Subtarget.hasTHeadC() || Subtarget.hasTHeadE()) {
  setOperationAction(ISD::ROTR, XLenVT, Legal);
  setOperationAction(ISD::CTLZ, XLenVT, Legal);
  setOperationAction(ISD::BSWAP, XLenVT, Legal);
  setOperationAction(ISD::XOR, XLenVT, Legal);
  setOperationAction(ISD::SELECT, XLenVT, Legal);
  setOperationAction(ISD::SIGN_EXTEND_INREG, MVT::i16, Legal);
  setOperationAction(ISD::SIGN_EXTEND_INREG, MVT::i8, Legal);
  setOperationAction(ISD::SIGN_EXTEND_INREG, MVT::i1, Legal);

  auto Tys = {MVT::i8, MVT::i16, MVT::i32};

  for (auto Ty : Tys) {
    setIndexedLoadAction(ISD::PRE_INC, Ty, Legal);
    setIndexedLoadAction(ISD::POST_INC, Ty, Legal);
    setIndexedStoreAction(ISD::PRE_INC, Ty, Legal);
    setIndexedStoreAction(ISD::POST_INC, Ty, Legal);
  }
}

if (Subtarget.hasTHeadC()) {
  assert(Subtarget.is64Bit() && "THead C extend must be 64-bit");
  setOperationAction(ISD::ROTR, MVT::i32, Custom);

  setIndexedLoadAction(ISD::PRE_INC, MVT::i64, Legal);
  setIndexedLoadAction(ISD::POST_INC, MVT::i64, Legal);
  setIndexedStoreAction(ISD::PRE_INC, MVT::i64, Legal);
  setIndexedStoreAction(ISD::POST_INC, MVT::i64, Legal);

  if (Subtarget.hasStdExtF()) {
  }

  if (Subtarget.hasStdExtD()) {
  }

  setTargetDAGCombine(ISD::LOAD);
  setTargetDAGCombine(ISD::STORE);
}

setSchedulingPreference(Sched::Source);

if (Subtarget.getTHEADProc() == RISCVSubtarget::THEAD::C906) {
  setPrefLoopAlignment(Align(4));
  setPrefFunctionAlignment(Align(4));
} else if (Subtarget.getTHEADProc() == RISCVSubtarget::THEAD::C910) {
  setPrefLoopAlignment(Align(16));
  setPrefFunctionAlignment(Align(16));
}
