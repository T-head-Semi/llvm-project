; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+d -mattr=+xtheadc -verify-machineinstrs < %s \
; RUN:   | FileCheck %s -check-prefix=THEADC

define i8* @lbia(i8* %base, i8* %addr.2, i8 %a) {
; THEADC-LABEL: lbia:
; THEADC:       # %bb.0:
; THEADC-NEXT:    lbia a3, (a0), -1, 0
; THEADC-NEXT:    add a2, a3, a2
; THEADC-NEXT:    sb a2, 0(a1)
; THEADC-NEXT:    ret
  %addr = getelementptr i8, i8* %base, i8 0
  %ld = load i8, i8* %addr
  %addr.1 = getelementptr i8, i8* %base, i8 -1
  %res = add i8 %ld, %a
  store i8 %res, i8* %addr.2
  ret i8* %addr.1
}

define i8* @lbib(i8* %base, i8 %a) {
; THEADC-LABEL: lbib:
; THEADC:       # %bb.0:
; THEADC-NEXT:    lbib a2, (a0), 1, 0
; THEADC-NEXT:    add a1, a2, a1
; THEADC-NEXT:    sb a1, 1(a0)
; THEADC-NEXT:    ret
  %addr = getelementptr i8, i8* %base, i8 1
  %ld = load i8, i8* %addr
  %addr.1 = getelementptr i8, i8* %base, i8 2
  %res = add i8 %ld, %a
  store i8 %res, i8* %addr.1
  ret i8* %addr
}

define i8* @lbuia(i8* %base, i64* %addr.2, i64 %a) {
; THEADC-LABEL: lbuia:
; THEADC:       # %bb.0:
; THEADC-NEXT:    lbuia a3, (a0), -1, 0
; THEADC-NEXT:    add a2, a3, a2
; THEADC-NEXT:    sd a2, 0(a1)
; THEADC-NEXT:    ret
  %addr = getelementptr i8, i8* %base, i8 0
  %ld = load i8, i8* %addr
  %zext = zext i8 %ld to i64
  %addr.1 = getelementptr i8, i8* %base, i8 -1
  %res = add i64 %zext, %a
  store i64 %res, i64* %addr.2
  ret i8* %addr.1
}

define i8* @lbuib(i8* %base, i64 %a, i64* %addr.1) {
; THEADC-LABEL: lbuib:
; THEADC:       # %bb.0:
; THEADC-NEXT:    lbuib a3, (a0), 1, 0
; THEADC-NEXT:    add a1, a3, a1
; THEADC-NEXT:    sd a1, 0(a2)
; THEADC-NEXT:    ret
  %addr = getelementptr i8, i8* %base, i8 1
  %ld = load i8, i8* %addr
  %zext = zext i8 %ld to i64
  %res = add i64 %zext, %a
  store i64 %res, i64* %addr.1
  ret i8* %addr
}

define i16* @lhia(i16* %base, i16* %addr.2, i16 %a) {
; THEADC-LABEL: lhia:
; THEADC:       # %bb.0:
; THEADC-NEXT:    lhia a3, (a0), -2, 0
; THEADC-NEXT:    add a2, a3, a2
; THEADC-NEXT:    sh a2, 0(a1)
; THEADC-NEXT:    ret
  %addr = getelementptr i16, i16* %base, i16 0
  %ld = load i16, i16* %addr
  %addr.1 = getelementptr i16, i16* %base, i16 -1
  %res = add i16 %ld, %a
  store i16 %res, i16* %addr.2
  ret i16* %addr.1
}

define i16* @lhib(i16* %base, i16 %a) {
; THEADC-LABEL: lhib:
; THEADC:       # %bb.0:
; THEADC-NEXT:    lhib a2, (a0), 2, 0
; THEADC-NEXT:    add a1, a2, a1
; THEADC-NEXT:    sh a1, 2(a0)
; THEADC-NEXT:    ret
  %addr = getelementptr i16, i16* %base, i16 1
  %ld = load i16, i16* %addr
  %addr.1 = getelementptr i16, i16* %base, i16 2
  %res = add i16 %ld, %a
  store i16 %res, i16* %addr.1
  ret i16* %addr
}

define i16* @lhuia(i16* %base, i64* %addr.2, i64 %a) {
; THEADC-LABEL: lhuia:
; THEADC:       # %bb.0:
; THEADC-NEXT:    lhuia a3, (a0), -2, 0
; THEADC-NEXT:    add a2, a3, a2
; THEADC-NEXT:    sd a2, 0(a1)
; THEADC-NEXT:    ret
  %addr = getelementptr i16, i16* %base, i16 0
  %ld = load i16, i16* %addr
  %zext = zext i16 %ld to i64
  %addr.1 = getelementptr i16, i16* %base, i16 -1
  %res = add i64 %zext, %a
  store i64 %res, i64* %addr.2
  ret i16* %addr.1
}

define i16* @lhuib(i16* %base, i64 %a, i64* %addr.1) {
; THEADC-LABEL: lhuib:
; THEADC:       # %bb.0:
; THEADC-NEXT:    lhuib a3, (a0), 2, 0
; THEADC-NEXT:    add a1, a3, a1
; THEADC-NEXT:    sd a1, 0(a2)
; THEADC-NEXT:    ret
  %addr = getelementptr i16, i16* %base, i16 1
  %ld = load i16, i16* %addr
  %zext = zext i16 %ld to i64
  %res = add i64 %zext, %a
  store i64 %res, i64* %addr.1
  ret i16* %addr
}

define i32* @lwia(i32* %base, i32* %addr.2, i32 %a) {
; THEADC-LABEL: lwia:
; THEADC:       # %bb.0:
; THEADC-NEXT:    lwia a3, (a0), -4, 0
; THEADC-NEXT:    add a2, a3, a2
; THEADC-NEXT:    sw a2, 0(a1)
; THEADC-NEXT:    ret
  %addr = getelementptr i32, i32* %base, i32 0
  %ld = load i32, i32* %addr
  %addr.1 = getelementptr i32, i32* %base, i32 -1
  %res = add i32 %ld, %a
  store i32 %res, i32* %addr.2
  ret i32* %addr.1
}

define i32* @lwib(i32* %base, i32 %a) {
; THEADC-LABEL: lwib:
; THEADC:       # %bb.0:
; THEADC-NEXT:    lwib a2, (a0), 4, 0
; THEADC-NEXT:    add a1, a2, a1
; THEADC-NEXT:    sw a1, 4(a0)
; THEADC-NEXT:    ret
  %addr = getelementptr i32, i32* %base, i32 1
  %ld = load i32, i32* %addr
  %addr.1 = getelementptr i32, i32* %base, i32 2
  %res = add i32 %ld, %a
  store i32 %res, i32* %addr.1
  ret i32* %addr
}

define i32* @lwuia(i32* %base, i64* %addr.2, i64 %a) {
; THEADC-LABEL: lwuia:
; THEADC:       # %bb.0:
; THEADC-NEXT:    lwuia a3, (a0), -4, 0
; THEADC-NEXT:    add a2, a3, a2
; THEADC-NEXT:    sd a2, 0(a1)
; THEADC-NEXT:    ret
  %addr = getelementptr i32, i32* %base, i32 0
  %ld = load i32, i32* %addr
  %zext = zext i32 %ld to i64
  %addr.1 = getelementptr i32, i32* %base, i32 -1
  %res = add i64 %zext, %a
  store i64 %res, i64* %addr.2
  ret i32* %addr.1
}

define i32* @lwuib(i32* %base, i64 %a, i64* %addr.1) {
; THEADC-LABEL: lwuib:
; THEADC:       # %bb.0:
; THEADC-NEXT:    lwuib a3, (a0), 4, 0
; THEADC-NEXT:    add a1, a3, a1
; THEADC-NEXT:    sd a1, 0(a2)
; THEADC-NEXT:    ret
  %addr = getelementptr i32, i32* %base, i32 1
  %ld = load i32, i32* %addr
  %zext = zext i32 %ld to i64
  %res = add i64 %zext, %a
  store i64 %res, i64* %addr.1
  ret i32* %addr
}

define i64* @ldia(i64* %base, i64* %addr.2, i64 %a) {
; THEADC-LABEL: ldia:
; THEADC:       # %bb.0:
; THEADC-NEXT:    ldia a3, (a0), -8, 0
; THEADC-NEXT:    add a2, a3, a2
; THEADC-NEXT:    sd a2, 0(a1)
; THEADC-NEXT:    ret
  %addr = getelementptr i64, i64* %base, i64 0
  %ld = load i64, i64* %addr
  %addr.1 = getelementptr i64, i64* %base, i64 -1
  %res = add i64 %ld, %a
  store i64 %res, i64* %addr.2
  ret i64* %addr.1
}

define i64* @ldib(i64* %base, i64 %a) {
; THEADC-LABEL: ldib:
; THEADC:       # %bb.0:
; THEADC-NEXT:    ldib a2, (a0), 8, 0
; THEADC-NEXT:    add a1, a2, a1
; THEADC-NEXT:    sd a1, 8(a0)
; THEADC-NEXT:    ret
  %addr = getelementptr i64, i64* %base, i64 1
  %ld = load i64, i64* %addr
  %addr.1 = getelementptr i64, i64* %base, i64 2
  %res = add i64 %ld, %a
  store i64 %res, i64* %addr.1
  ret i64* %addr
}

define i8* @sbia(i8* %base, i8 %a, i8 %b) {
; THEADC-LABEL: sbia:
; THEADC:       # %bb.0:
; THEADC-NEXT:    add a1, a1, a2
; THEADC-NEXT:    sbia a1, (a0), 1, 0
; THEADC-NEXT:    ret
  %addr.1 = getelementptr i8, i8* %base, i8 1
  %res = add i8 %a, %b
  store i8 %res, i8* %base
  ret i8* %addr.1
}

define i8* @sbib(i8* %base, i8 %a, i8 %b) {
; THEADC-LABEL: sbib:
; THEADC:       # %bb.0:
; THEADC-NEXT:    add a1, a1, a2
; THEADC-NEXT:    sbib a1, (a0), 1, 0
; THEADC-NEXT:    ret
  %addr.1 = getelementptr i8, i8* %base, i8 1
  %res = add i8 %a, %b
  store i8 %res, i8* %addr.1
  ret i8* %addr.1
}

define i16* @shia(i16* %base, i16 %a, i16 %b) {
; THEADC-LABEL: shia:
; THEADC:       # %bb.0:
; THEADC-NEXT:    add a1, a1, a2
; THEADC-NEXT:    shia a1, (a0), 2, 0
; THEADC-NEXT:    ret
  %addr.1 = getelementptr i16, i16* %base, i16 1
  %res = add i16 %a, %b
  store i16 %res, i16* %base
  ret i16* %addr.1
}

define i16* @shib(i16* %base, i16 %a, i16 %b) {
; THEADC-LABEL: shib:
; THEADC:       # %bb.0:
; THEADC-NEXT:    add a1, a1, a2
; THEADC-NEXT:    shib a1, (a0), 2, 0
; THEADC-NEXT:    ret
  %addr.1 = getelementptr i16, i16* %base, i16 1
  %res = add i16 %a, %b
  store i16 %res, i16* %addr.1
  ret i16* %addr.1
}

define i32* @swia(i32* %base, i32 %a, i32 %b) {
; THEADC-LABEL: swia:
; THEADC:       # %bb.0:
; THEADC-NEXT:    add a1, a1, a2
; THEADC-NEXT:    swia a1, (a0), 4, 0
; THEADC-NEXT:    ret
  %addr.1 = getelementptr i32, i32* %base, i32 1
  %res = add i32 %a, %b
  store i32 %res, i32* %base
  ret i32* %addr.1
}

define i32* @swib(i32* %base, i32 %a, i32 %b) {
; THEADC-LABEL: swib:
; THEADC:       # %bb.0:
; THEADC-NEXT:    add a1, a1, a2
; THEADC-NEXT:    swib a1, (a0), 4, 0
; THEADC-NEXT:    ret
  %addr.1 = getelementptr i32, i32* %base, i32 1
  %res = add i32 %a, %b
  store i32 %res, i32* %addr.1
  ret i32* %addr.1
}

define i64* @sdia(i64* %base, i64 %a, i64 %b) {
; THEADC-LABEL: sdia:
; THEADC:       # %bb.0:
; THEADC-NEXT:    add a1, a1, a2
; THEADC-NEXT:    sdia a1, (a0), 8, 0
; THEADC-NEXT:    ret
  %addr.1 = getelementptr i64, i64* %base, i64 1
  %res = add i64 %a, %b
  store i64 %res, i64* %base
  ret i64* %addr.1
}

define i64* @sdib(i64* %base, i64 %a, i64 %b) {
; THEADC-LABEL: sdib:
; THEADC:       # %bb.0:
; THEADC-NEXT:    add a1, a1, a2
; THEADC-NEXT:    sdib a1, (a0), 8, 0
; THEADC-NEXT:    ret
  %addr.1 = getelementptr i64, i64* %base, i64 1
  %res = add i64 %a, %b
  store i64 %res, i64* %addr.1
  ret i64* %addr.1
}

define i64 @lrb(i8* %a, i64 %b) {
; THEADC-LABEL: lrb:
; THEADC:       # %bb.0:
; THEADC-NEXT:    lrb a0, a0, a1, 0
; THEADC-NEXT:    add a0, a0, a0
; THEADC-NEXT:    ret
  %1 = getelementptr i8, i8* %a, i64 %b
  %2 = load i8, i8* %1, align 1
  %3 = sext i8 %2 to i64
  %4 = add i64 %3, %3
  ret i64 %4
}

define i64 @lurb(i8* %a, i32 %b) {
; THEADC-LABEL: lurb:
; THEADC:       # %bb.0:
; THEADC-NEXT:    lurb a0, a0, a1, 0
; THEADC-NEXT:    add a0, a0, a0
; THEADC-NEXT:    ret
  %1 = zext i32 %b to i64
  %2 = getelementptr i8, i8* %a, i64 %1
  %3 = load i8, i8* %2, align 1
  %4 = sext i8 %3 to i64
  %5 = add i64 %4, %4
  ret i64 %5
}

define i64 @lrbu(i8* %a, i64 %b) {
; THEADC-LABEL: lrbu:
; THEADC:       # %bb.0:
; THEADC-NEXT:    lrbu a0, a0, a1, 0
; THEADC-NEXT:    add a0, a0, a0
; THEADC-NEXT:    ret
  %1 = getelementptr i8, i8* %a, i64 %b
  %2 = load i8, i8* %1, align 1
  %3 = zext i8 %2 to i64
  %4 = add i64 %3, %3
  ret i64 %4
}

define i64 @lurbu(i8* %a, i32 %b) {
; THEADC-LABEL: lurbu:
; THEADC:       # %bb.0:
; THEADC-NEXT:    lurbu a0, a0, a1, 0
; THEADC-NEXT:    add a0, a0, a0
; THEADC-NEXT:    ret
  %1 = zext i32 %b to i64
  %2 = getelementptr i8, i8* %a, i64 %1
  %3 = load i8, i8* %2, align 1
  %4 = zext i8 %3 to i64
  %5 = add i64 %4, %4
  ret i64 %5
}

define i64 @lrh(i16* %a, i64 %b) {
; THEADC-LABEL: lrh:
; THEADC:       # %bb.0:
; THEADC-NEXT:    lrh a0, a0, a1, 1
; THEADC-NEXT:    add a0, a0, a0
; THEADC-NEXT:    ret
  %1 = getelementptr i16, i16* %a, i64 %b
  %2 = load i16, i16* %1, align 4
  %3 = sext i16 %2 to i64
  %4 = add i64 %3, %3
  ret i64 %4
}

define i64 @lurh(i16* %a, i32 %b) {
; THEADC-LABEL: lurh:
; THEADC:       # %bb.0:
; THEADC-NEXT:    lurh a0, a0, a1, 1
; THEADC-NEXT:    add a0, a0, a0
; THEADC-NEXT:    ret
  %1 = zext i32 %b to i64
  %2 = getelementptr i16, i16* %a, i64 %1
  %3 = load i16, i16* %2, align 4
  %4 = sext i16 %3 to i64
  %5 = add i64 %4, %4
  ret i64 %5
}

define i64 @lrhu(i16* %a, i64 %b) {
; THEADC-LABEL: lrhu:
; THEADC:       # %bb.0:
; THEADC-NEXT:    lrhu a0, a0, a1, 1
; THEADC-NEXT:    add a0, a0, a0
; THEADC-NEXT:    ret
  %1 = getelementptr i16, i16* %a, i64 %b
  %2 = load i16, i16* %1, align 4
  %3 = zext i16 %2 to i64
  %4 = add i64 %3, %3
  ret i64 %4
}

define i64 @lurhu(i16* %a, i32 %b) {
; THEADC-LABEL: lurhu:
; THEADC:       # %bb.0:
; THEADC-NEXT:    lurhu a0, a0, a1, 1
; THEADC-NEXT:    add a0, a0, a0
; THEADC-NEXT:    ret
  %1 = zext i32 %b to i64
  %2 = getelementptr i16, i16* %a, i64 %1
  %3 = load i16, i16* %2, align 4
  %4 = zext i16 %3 to i64
  %5 = add i64 %4, %4
  ret i64 %5
}

define i64 @lrw(i32* %a, i64 %b) {
; THEADC-LABEL: lrw:
; THEADC:       # %bb.0:
; THEADC-NEXT:    lrw a0, a0, a1, 2
; THEADC-NEXT:    add a0, a0, a0
; THEADC-NEXT:    ret
  %1 = getelementptr i32, i32* %a, i64 %b
  %2 = load i32, i32* %1, align 4
  %3 = sext i32 %2 to i64
  %4 = add i64 %3, %3
  ret i64 %4
}

define i64 @lurw(i32* %a, i32 %b) {
; THEADC-LABEL: lurw:
; THEADC:       # %bb.0:
; THEADC-NEXT:    lurw a0, a0, a1, 2
; THEADC-NEXT:    add a0, a0, a0
; THEADC-NEXT:    ret
  %1 = zext i32 %b to i64
  %2 = getelementptr i32, i32* %a, i64 %1
  %3 = load i32, i32* %2, align 4
  %4 = sext i32 %3 to i64
  %5 = add i64 %4, %4
  ret i64 %5
}

define i64 @lrwu(i32* %a, i64 %b) {
; THEADC-LABEL: lrwu:
; THEADC:       # %bb.0:
; THEADC-NEXT:    lrwu a0, a0, a1, 2
; THEADC-NEXT:    add a0, a0, a0
; THEADC-NEXT:    ret
  %1 = getelementptr i32, i32* %a, i64 %b
  %2 = load i32, i32* %1, align 4
  %3 = zext i32 %2 to i64
  %4 = add i64 %3, %3
  ret i64 %4
}

define i64 @lurwu(i32* %a, i32 %b) {
; THEADC-LABEL: lurwu:
; THEADC:       # %bb.0:
; THEADC-NEXT:    lurwu a0, a0, a1, 2
; THEADC-NEXT:    add a0, a0, a0
; THEADC-NEXT:    ret
  %1 = zext i32 %b to i64
  %2 = getelementptr i32, i32* %a, i64 %1
  %3 = load i32, i32* %2, align 4
  %4 = zext i32 %3 to i64
  %5 = add i64 %4, %4
  ret i64 %5
}

define i64 @lrd(i64* %a, i64 %b) {
; THEADC-LABEL: lrd:
; THEADC:       # %bb.0:
; THEADC-NEXT:    lrd a0, a0, a1, 3
; THEADC-NEXT:    add a0, a0, a0
; THEADC-NEXT:    ret
  %1 = getelementptr i64, i64* %a, i64 %b
  %2 = load i64, i64* %1, align 8
  %3 = add i64 %2, %2
  ret i64 %3
}

define i64 @lurd(i64* %a, i32 %b) {
; THEADC-LABEL: lurd:
; THEADC:       # %bb.0:
; THEADC-NEXT:    lurd a0, a0, a1, 3
; THEADC-NEXT:    add a0, a0, a0
; THEADC-NEXT:    ret
  %1 = zext i32 %b to i64
  %2 = getelementptr i64, i64* %a, i64 %1
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, %3
  ret i64 %4
}

define void @srb(i8* %a, i64 %b, i8 %c) {
; THEADC-LABEL: srb:
; THEADC:       # %bb.0:
; THEADC-NEXT:    add a2, a2, a2
; THEADC-NEXT:    srb a2, a0, a1, 0
; THEADC-NEXT:    ret
  %1 = add i8 %c, %c
  %2 = getelementptr i8, i8* %a, i64 %b
  store i8 %1, i8* %2, align 8
  ret void
}

define void @surb(i8* %a, i32 %b, i8 %c) {
; THEADC-LABEL: surb:
; THEADC:       # %bb.0:
; THEADC-NEXT:    add a2, a2, a2
; THEADC-NEXT:    surb a2, a0, a1, 0
; THEADC-NEXT:    ret
  %1 = zext i32 %b to i64
  %2 = add i8 %c, %c
  %3 = getelementptr i8, i8* %a, i64 %1
  store i8 %2, i8* %3, align 8
  ret void
}

define void @srh(i16* %a, i64 %b, i16 %c) {
; THEADC-LABEL: srh:
; THEADC:       # %bb.0:
; THEADC-NEXT:    add a2, a2, a2
; THEADC-NEXT:    srh a2, a0, a1, 1
; THEADC-NEXT:    ret
  %1 = add i16 %c, %c
  %2 = getelementptr i16, i16* %a, i64 %b
  store i16 %1, i16* %2, align 8
  ret void
}

define void @surh(i16* %a, i32 %b, i16 %c) {
; THEADC-LABEL: surh:
; THEADC:       # %bb.0:
; THEADC-NEXT:    add a2, a2, a2
; THEADC-NEXT:    surh a2, a0, a1, 1
; THEADC-NEXT:    ret
  %1 = zext i32 %b to i64
  %2 = add i16 %c, %c
  %3 = getelementptr i16, i16* %a, i64 %1
  store i16 %2, i16* %3, align 8
  ret void
}

define void @srw(i32* %a, i64 %b, i32 %c) {
; THEADC-LABEL: srw:
; THEADC:       # %bb.0:
; THEADC-NEXT:    add a2, a2, a2
; THEADC-NEXT:    srw a2, a0, a1, 2
; THEADC-NEXT:    ret
  %1 = add i32 %c, %c
  %2 = getelementptr i32, i32* %a, i64 %b
  store i32 %1, i32* %2, align 8
  ret void
}

define void @surw(i32* %a, i32 %b, i32 %c) {
; THEADC-LABEL: surw:
; THEADC:       # %bb.0:
; THEADC-NEXT:    add a2, a2, a2
; THEADC-NEXT:    surw a2, a0, a1, 2
; THEADC-NEXT:    ret
  %1 = zext i32 %b to i64
  %2 = add i32 %c, %c
  %3 = getelementptr i32, i32* %a, i64 %1
  store i32 %2, i32* %3, align 8
  ret void
}

define void @srd(i64* %a, i64 %b, i64 %c) {
; THEADC-LABEL: srd:
; THEADC:       # %bb.0:
; THEADC-NEXT:    add a2, a2, a2
; THEADC-NEXT:    srd a2, a0, a1, 3
; THEADC-NEXT:    ret
  %1 = add i64 %c, %c
  %2 = getelementptr i64, i64* %a, i64 %b
  store i64 %1, i64* %2, align 8
  ret void
}

define void @surd(i64* %a, i32 %b, i64 %c) {
; THEADC-LABEL: surd:
; THEADC:       # %bb.0:
; THEADC-NEXT:    add a2, a2, a2
; THEADC-NEXT:    surd a2, a0, a1, 3
; THEADC-NEXT:    ret
  %1 = zext i32 %b to i64
  %2 = add i64 %c, %c
  %3 = getelementptr i64, i64* %a, i64 %1
  store i64 %2, i64* %3, align 8
  ret void
}

define i64 @lwd(i32* %a) {
; THEADC-LABEL: lwd:
; THEADC:       # %bb.0:
; THEADC-NEXT:    lwd a1, a2, (a0), 2, 3
; THEADC-NEXT:    add a0, a1, a2
; THEADC-NEXT:    ret
  %1 = getelementptr i32, i32* %a, i64 4
  %2 = load i32, i32* %1, align 4
  %3 = getelementptr i32, i32* %a, i64 5
  %4 = load i32, i32* %3, align 4
  %5 = sext i32 %2 to i64
  %6 = sext i32 %4 to i64
  %7 = add i64 %5, %6
  ret i64 %7
}

define i64 @lwud(i32* %a) {
; THEADC-LABEL: lwud:
; THEADC:       # %bb.0:
; THEADC-NEXT:    lwud a1, a2, (a0), 2, 3
; THEADC-NEXT:    add a0, a1, a2
; THEADC-NEXT:    ret
  %1 = getelementptr i32, i32* %a, i64 4
  %2 = load i32, i32* %1, align 4
  %3 = getelementptr i32, i32* %a, i64 5
  %4 = load i32, i32* %3, align 4
  %5 = zext i32 %2 to i64
  %6 = zext i32 %4 to i64
  %7 = add i64 %5, %6
  ret i64 %7
}

define i64 @ldd(i64* %a) {
; THEADC-LABEL: ldd:
; THEADC:       # %bb.0:
; THEADC-NEXT:    ldd a1, a2, (a0), 2, 4
; THEADC-NEXT:    add a0, a1, a2
; THEADC-NEXT:    ret
  %1 = getelementptr i64, i64* %a, i64 4
  %2 = load i64, i64* %1, align 8
  %3 = getelementptr i64, i64* %a, i64 5
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %2, %4
  ret i64 %5
}

define i64 @lwd_0(i32* %a) {
; THEADC-LABEL: lwd_0:
; THEADC:       # %bb.0:
; THEADC-NEXT:    lwd a1, a2, (a0), 0, 3
; THEADC-NEXT:    add a0, a1, a2
; THEADC-NEXT:    ret
  %1 = getelementptr i32, i32* %a, i64 0
  %2 = load i32, i32* %1, align 4
  %3 = getelementptr i32, i32* %a, i64 1
  %4 = load i32, i32* %3, align 4
  %5 = sext i32 %2 to i64
  %6 = sext i32 %4 to i64
  %7 = add i64 %5, %6
  ret i64 %7
}

define i64 @lwud_0(i32* %a) {
; THEADC-LABEL: lwud_0:
; THEADC:       # %bb.0:
; THEADC-NEXT:    lwud a1, a2, (a0), 0, 3
; THEADC-NEXT:    add a0, a1, a2
; THEADC-NEXT:    ret
  %1 = getelementptr i32, i32* %a, i64 0
  %2 = load i32, i32* %1, align 4
  %3 = getelementptr i32, i32* %a, i64 1
  %4 = load i32, i32* %3, align 4
  %5 = zext i32 %2 to i64
  %6 = zext i32 %4 to i64
  %7 = add i64 %5, %6
  ret i64 %7
}

define i64 @ldd_0(i64* %a) {
; THEADC-LABEL: ldd_0:
; THEADC:       # %bb.0:
; THEADC-NEXT:    ldd a1, a2, (a0), 0, 4
; THEADC-NEXT:    add a0, a1, a2
; THEADC-NEXT:    ret
  %1 = getelementptr i64, i64* %a, i64 0
  %2 = load i64, i64* %1, align 8
  %3 = getelementptr i64, i64* %a, i64 1
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %2, %4
  ret i64 %5
}

define void @swd(i32* %a, i32 %b, i32%c) {
; THEADC-LABEL: swd:
; THEADC:       # %bb.0:
; THEADC-NEXT:    swd a1, a2, (a0), 2, 3
; THEADC-NEXT:    ret
  %1 = getelementptr i32, i32* %a, i64 4
  store i32 %b, i32* %1, align 4
  %2 = getelementptr i32, i32* %a, i64 5
  store i32 %c, i32* %2, align 4
  ret void
}

define void @sdd(i64* %a, i64 %b, i64%c) {
; THEADC-LABEL: sdd:
; THEADC:       # %bb.0:
; THEADC-NEXT:    sdd a1, a2, (a0), 2, 4
; THEADC-NEXT:    ret
  %1 = getelementptr i64, i64* %a, i64 4
  store i64 %b, i64* %1, align 8
  %2 = getelementptr i64, i64* %a, i64 5
  store i64 %c, i64* %2, align 8
  ret void
}

define void @swd_0(i32* %a, i32 %b, i32%c) {
; THEADC-LABEL: swd_0:
; THEADC:       # %bb.0:
; THEADC-NEXT:    swd a1, a2, (a0), 0, 3
; THEADC-NEXT:    ret
  %1 = getelementptr i32, i32* %a, i64 0
  store i32 %b, i32* %1, align 4
  %2 = getelementptr i32, i32* %a, i64 1
  store i32 %c, i32* %2, align 4
  ret void
}

define void @sdd_0(i64* %a, i64 %b, i64%c) {
; THEADC-LABEL: sdd_0:
; THEADC:       # %bb.0:
; THEADC-NEXT:    sdd a1, a2, (a0), 0, 4
; THEADC-NEXT:    ret
  %1 = getelementptr i64, i64* %a, i64 0
  store i64 %b, i64* %1, align 8
  %2 = getelementptr i64, i64* %a, i64 1
  store i64 %c, i64* %2, align 8
  ret void
}
