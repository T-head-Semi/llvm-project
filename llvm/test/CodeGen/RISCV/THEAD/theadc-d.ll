; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+d -mattr=+xtheadc -verify-machineinstrs < %s \
; RUN:   | FileCheck %s -check-prefix=THEADC

define float @flrw(float* %a, i64 %b) {
; THEADC-LABEL: flrw:
; THEADC:       # %bb.0:
; THEADC-NEXT:    flrw ft0, a0, a1, 2
; THEADC-NEXT:    fadd.s ft0, ft0, ft0
; THEADC-NEXT:    fmv.x.w a0, ft0
; THEADC-NEXT:    ret
  %1 = getelementptr float, float* %a, i64 %b
  %2 = load float, float* %1, align 4
  %3 = fadd float %2, %2
  ret float %3
}

define float @flurw(float* %a, i32 %b) {
; THEADC-LABEL: flurw:
; THEADC:       # %bb.0:
; THEADC-NEXT:    flurw ft0, a0, a1, 2
; THEADC-NEXT:    fadd.s ft0, ft0, ft0
; THEADC-NEXT:    fmv.x.w a0, ft0
; THEADC-NEXT:    ret
  %1 = zext i32 %b to i64
  %2 = getelementptr float, float* %a, i64 %1
  %3 = load float, float* %2, align 4
  %4 = fadd float %3, %3
  ret float %4
}

define void @fsrw(float* %a, i64 %b, float %c) {
; THEADC-LABEL: fsrw:
; THEADC:       # %bb.0:
; THEADC-NEXT:    fmv.w.x ft0, a2
; THEADC-NEXT:    fadd.s ft0, ft0, ft0
; THEADC-NEXT:    fsrw ft0, a0, a1, 2
; THEADC-NEXT:    ret
  %1 = fadd float %c, %c
  %2 = getelementptr float, float* %a, i64 %b
  store float %1, float* %2, align 4
  ret void
}

define void @fsurw(float* %a, i32 %b, float %c) {
; THEADC-LABEL: fsurw:
; THEADC:       # %bb.0:
; THEADC-NEXT:    fmv.w.x ft0, a2
; THEADC-NEXT:    fadd.s ft0, ft0, ft0
; THEADC-NEXT:    fsurw ft0, a0, a1, 2
; THEADC-NEXT:    ret
  %1 = zext i32 %b to i64
  %2 = fadd float %c, %c
  %3 = getelementptr float, float* %a, i64 %1
  store float %2, float* %3, align 4
  ret void
}

define double @flrd(double* %a, i64 %b) {
; THEADC-LABEL: flrd:
; THEADC:       # %bb.0:
; THEADC-NEXT:    flrd ft0, a0, a1, 3
; THEADC-NEXT:    fadd.d ft0, ft0, ft0
; THEADC-NEXT:    fmv.x.d a0, ft0
; THEADC-NEXT:    ret
  %1 = getelementptr double, double* %a, i64 %b
  %2 = load double, double* %1, align 8
  %3 = fadd double %2, %2
  ret double %3
}

define double @flurd(double* %a, i32 %b) {
; THEADC-LABEL: flurd:
; THEADC:       # %bb.0:
; THEADC-NEXT:    flurd ft0, a0, a1, 3
; THEADC-NEXT:    fadd.d ft0, ft0, ft0
; THEADC-NEXT:    fmv.x.d a0, ft0
; THEADC-NEXT:    ret
  %1 = zext i32 %b to i64
  %2 = getelementptr double, double* %a, i64 %1
  %3 = load double, double* %2, align 8
  %4 = fadd double %3, %3
  ret double %4
}

define void @fsrd(double* %a, i64 %b, double %c) {
; THEADC-LABEL: fsrd:
; THEADC:       # %bb.0:
; THEADC-NEXT:    fmv.d.x ft0, a2
; THEADC-NEXT:    fadd.d ft0, ft0, ft0
; THEADC-NEXT:    fsrd ft0, a0, a1, 3
; THEADC-NEXT:    ret
  %1 = fadd double %c, %c
  %2 = getelementptr double, double* %a, i64 %b
  store double %1, double* %2, align 8
  ret void
}

define void @fsurd(double* %a, i32 %b, double %c) {
; THEADC-LABEL: fsurd:
; THEADC:       # %bb.0:
; THEADC-NEXT:    fmv.d.x ft0, a2
; THEADC-NEXT:    fadd.d ft0, ft0, ft0
; THEADC-NEXT:    fsurd ft0, a0, a1, 3
; THEADC-NEXT:    ret
  %1 = zext i32 %b to i64
  %2 = fadd double %c, %c
  %3 = getelementptr double, double* %a, i64 %1
  store double %2, double* %3, align 8
  ret void
}
